{"mode":"Blocks","hardwareTarget":"brain","workspace":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"U`9aA+=)r+L1tzA.)-qi\">myVariable</variable><variable type=\"broadcast_msg\" id=\"f2J#dC/|^=S+(Vww]s1G\">check_object_pos</variable><variable type=\"broadcast_msg\" id=\"$BX[L|mV3/O{H_nA=AIg\">message1</variable></variables><block type=\"exp_events_when_broadcasted\" id=\"DveY4*1$xFpd6rtuON^T\" x=\"310\" y=\"70\"><field name=\"BROADCAST_OPTION\" id=\"f2J#dC/|^=S+(Vww]s1G\" variabletype=\"broadcast_msg\">check_object_pos</field><next><block type=\"exp_sensing_snapshot\" id=\"z@O7tyBs)~`2iQd|lfoL\"><field name=\"VISION\">Vision4</field><field name=\"SIGNATURE\">RED_OBJECT</field><next><block type=\"exp_control_if_then\" id=\",|%Qg,Au=iS#UrEgBIa?\"><value name=\"CONDITION\"><block type=\"exp_sensing_object_exists\" id=\"AncwqoP`[05iUax1sR`c\"><field name=\"VISION\">Vision4</field></block></value><statement name=\"SUBSTACK\"><block type=\"exp_looks_next_row\" id=\"XX,C0wx|leIjfrkAqled\"><field name=\"TARGET\">Brain</field><next><block type=\"exp_looks_print\" id=\"@r*NH6B3f,z_UhZ(d;2R\"><field name=\"TARGET\">Brain</field><field name=\"andsetcursortonextrow_mutator\">false</field><value name=\"DATA\"><shadow type=\"text\" id=\"-#)53s(8SD4WDr^Q/+sx\"><field name=\"TEXT\">VEXcode</field></shadow><block type=\"exp_sensing_vision_object\" id=\"9_y@rI*p((5Qyla6xpFQ\"><field name=\"VISION\">Vision4</field><field name=\"PROPERTY\">centerY</field></block></value></block></next></block></statement><next><block type=\"exp_control_if_elseif_else\" id=\".MZdOKbd3`5!E]BXh6LT\"><mutation xmlns=\"http://www.w3.org/1999/xhtml\" branches=\"2\"></mutation><value name=\"CONDITION1\"><block type=\"exp_operator_and\" id=\"HMKe7[N[)71p5U|_{p]P\"><value name=\"OPERAND1\"><block type=\"exp_operator_less_than\" id=\"ui=*TjIP[GMNbU_#xoQ}\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"3G`m}x846Z=lrPx{o#kw\"><field name=\"NUM\">0</field></shadow><block type=\"exp_sensing_vision_object\" id=\"K%`{7CbFKGJ|!EFHC*om\"><field name=\"VISION\">Vision4</field><field name=\"PROPERTY\">centerY</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"=C?J:k*w/)k|l/:tSPi`\"><field name=\"NUM\">200</field></shadow></value></block></value><value name=\"OPERAND2\"><block type=\"exp_operator_greater_than\" id=\"_08p2kN.xdmQ{S;b2S.I\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\":kroDjS{XlpN}wR~YtH=\"><field name=\"NUM\">0</field></shadow><block type=\"exp_sensing_vision_object\" id=\"m,2yg!CB#wl{s69SIUcz\"><field name=\"VISION\">Vision4</field><field name=\"PROPERTY\">centerY</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"a*YlOJcj]dS]v!IeO=7#\"><field name=\"NUM\">180</field></shadow></value></block></value></block></value><statement name=\"SUBSTACK1\"><block type=\"exp_sounds_play_sound\" id=\"v5lRtG4)!(]Whz+E^46+\"><field name=\"SOUND\">gasFillup</field></block></statement><value name=\"CONDITION2\"><block type=\"exp_operator_and\" id=\"HWU-}T|h(T.v6l,-?*M.\"><value name=\"OPERAND1\"><block type=\"exp_operator_less_than\" id=\"ey2=`UrUpecj:,HtW*]+\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"5jphn2BI*F_2t8`LQw)n\"><field name=\"NUM\">0</field></shadow><block type=\"exp_sensing_vision_object\" id=\"2=3VDbQPP4).5,X,VnJ]\"><field name=\"VISION\">Vision4</field><field name=\"PROPERTY\">centerY</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"^(f1M}Ku(uVGf{b?7Kq.\"><field name=\"NUM\">180</field></shadow></value></block></value><value name=\"OPERAND2\"><block type=\"exp_operator_greater_than\" id=\"CJlqwsG:N(7/zuN@:ZT!\"><value name=\"OPERAND1\"><shadow type=\"math_number\" id=\"RontMiv|innY4SKVU~`T\"><field name=\"NUM\">0</field></shadow><block type=\"exp_sensing_vision_object\" id=\"EyO]AYxtN12l;C7UeNO4\"><field name=\"VISION\">Vision4</field><field name=\"PROPERTY\">centerY</field></block></value><value name=\"OPERAND2\"><shadow type=\"math_number\" id=\"1s/uH~on7u(/$dru$}:Y\"><field name=\"NUM\">150</field></shadow></value></block></value></block></value><statement name=\"SUBSTACK2\"><block type=\"exp_sounds_play_sound\" id=\"@?(Ws?d~h^h0.XMAnPu(\"><field name=\"SOUND\">siren2</field></block></statement></block></next></block></next></block></next></block><block type=\"exp_events_when_started\" id=\".NsXwU_L.OuU1l7Sho$F\" x=\"-170\" y=\"110\"><next><block type=\"exp_looks_set_font\" id=\"4~T_Awd(k=z#O!mwBX~X\"><field name=\"FONT\">mono15</field><next><block type=\"exp_control_forever\" id=\"f5zI^M)-hzB)W(vp/;/F\"><statement name=\"SUBSTACK\"><block type=\"exp_events_broadcast_and_wait\" id=\"PcjUQuhEyT#k=ZGMF4o7\"><field name=\"BROADCAST_OPTION\" id=\"f2J#dC/|^=S+(Vww]s1G\" variabletype=\"broadcast_msg\">check_object_pos</field><next><block type=\"exp_control_wait\" id=\"8wcH~(iJ):VZLE6[DMdQ\"><value name=\"DURATION\"><shadow type=\"math_positive_number\" id=\"{^fmH$IvkiQ#228l?.;4\"><field name=\"NUM\">0.3</field></shadow></value><next><block type=\"exp_looks_clear_all_rows\" id=\"%zh)obDY{bSf}FtD`lU+\"><field name=\"TARGET\">Brain</field></block></next></block></next></block></statement></block></next></block></next></block></xml>","robotConfig":[{"port":[4],"name":"Vision4","customName":false,"deviceType":"Vision","deviceClass":"vision","setting":{"config":"{\"config\":{\"brightness\":50,\"signatures\":[{\"name\":\"RED_OBJECT\",\"parameters\":{\"uMin\":6221,\"uMax\":7895,\"uMean\":7058,\"vMin\":-669,\"vMax\":-131,\"vMean\":-400,\"rgb\":1,\"type\":0,\"name\":\"RED_OBJECT\"},\"range\":3.1},{\"name\":\"BLUE_OBJECT\",\"parameters\":{\"uMin\":-3403,\"uMax\":-2909,\"uMean\":-3156,\"vMin\":7469,\"vMax\":8623,\"vMean\":8046,\"rgb\":1,\"type\":0,\"name\":\"BLUE_OBJECT\"},\"range\":6.7},{\"name\":\"GREEN_OBJECT\",\"parameters\":{\"uMin\":-6597,\"uMax\":-4667,\"uMean\":-5632,\"vMin\":-3103,\"vMax\":-1957,\"vMean\":-2530,\"rgb\":1,\"type\":0,\"name\":\"GREEN_OBJECT\"},\"range\":1.8},{\"name\":\"SIG_4\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_4\"},\"range\":2.5},{\"name\":\"SIG_5\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_5\"},\"range\":2.5},{\"name\":\"SIG_6\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_6\"},\"range\":2.5},{\"name\":\"SIG_7\",\"parameters\":{\"uMin\":0,\"uMax\":0,\"uMean\":0,\"vMin\":0,\"vMax\":0,\"vMean\":0,\"rgb\":0,\"type\":0,\"name\":\"SIG_7\"},\"range\":2.5}],\"codes\":[]}}","isConfigured":"false"},"triportSourcePort":22}],"slot":4,"platform":"EXP","sdkVersion":"20240802.15.00.00","appVersion":"4.0.8","minVersion":"4.0.0","fileFormat":"2.0.0","targetBrainGen":"First","v5SoundsEnabled":false,"downloadLanguage":"python","cppStatus":"true","cpp":"// Make sure all required headers are included.\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdbool.h>\n#include <math.h>\n#include <string.h>\n\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// Brain should be defined by default\nbrain Brain;\n\n\n// START EXP MACROS\n#define waitUntil(condition)                                                   \\\n  do {                                                                         \\\n    wait(5, msec);                                                             \\\n  } while (!(condition))\n\n#define repeat(iterations)                                                     \\\n  for (int iterator = 0; iterator < iterations; iterator++)\n// END EXP MACROS\n\n\n// Robot configuration code.\ninertial BrainInertial = inertial();\n/*vex-vision-config:begin*/\nvision::signature Vision4__RED_OBJECT = vision::signature (1, 6221, 7895, 7058,-669, -131, -400,3.1, 0);\nvision::signature Vision4__BLUE_OBJECT = vision::signature (2, -3403, -2909, -3156,7469, 8623, 8046,6.7, 0);\nvision::signature Vision4__GREEN_OBJECT = vision::signature (3, -6597, -4667, -5632,-3103, -1957, -2530,1.8, 0);\nvision Vision4 = vision (PORT4, 50, Vision4__RED_OBJECT, Vision4__BLUE_OBJECT, Vision4__GREEN_OBJECT);\n/*vex-vision-config:end*/\n\n\n// generating and setting random seed\nvoid initializeRandomSeed(){\n  wait(100,msec);\n  double xAxis = BrainInertial.acceleration(xaxis) * 1000;\n  double yAxis = BrainInertial.acceleration(yaxis) * 1000;\n  double zAxis = BrainInertial.acceleration(zaxis) * 1000;\n  // Combine these values into a single integer\n  int seed = int(\n    xAxis + yAxis + zAxis\n  );\n  // Set the seed\n  srand(seed);\n}\n\n\n\nvoid vexcodeInit() {\n\n  // Initializing random seed.\n  initializeRandomSeed(); \n}\n\n\n// Generated code.\n\n// Include the EXP Library\n#include \"vex.h\"\n  \n// Allows for easier use of the VEX Library\nusing namespace vex;\n\nint Brain_precision = 0, Console_precision = 0, Vision4_objectIndex = 0;\n\nfloat myVariable;\n\nevent check_object_pos = event();\nevent message1 = event();\n\n// Used to find the format string for printing numbers with the\n// desired number of decimal places\nconst char* printToBrain_numberFormat() {\n  // look at the current precision setting to find the format string\n  switch(Brain_precision){\n    case 0:  return \"%.0f\"; // 0 decimal places (1)\n    case 1:  return \"%.1f\"; // 1 decimal place  (0.1)\n    case 2:  return \"%.2f\"; // 2 decimal places (0.01)\n    case 3:  return \"%.3f\"; // 3 decimal places (0.001)\n    default: return \"%f\"; // use the print system default for everthing else\n  }\n}\n\n// \"when I receive check_object_pos\" hat block\nvoid onevent_check_object_pos_0() {\n  Vision4.takeSnapshot(Vision4__RED_OBJECT);\n  if (Vision4.objectCount > 0) {\n    Brain.Screen.newLine();\n    Brain.Screen.print(printToBrain_numberFormat(), static_cast<float>(Vision4.objects[Vision4_objectIndex].centerY));\n  }\n  if (Vision4.objects[Vision4_objectIndex].centerY < 200.0 && Vision4.objects[Vision4_objectIndex].centerY > 180.0) {\n    Brain.playSound(fillup);\n  } else if (Vision4.objects[Vision4_objectIndex].centerY < 180.0 && Vision4.objects[Vision4_objectIndex].centerY > 150.0) {\n    Brain.playSound(siren);\n  } else {\n  }\n}\n\n// \"when started\" hat block\nint whenStarted1() {\n  Brain.Screen.setFont(mono15);\n  while (true) {\n    check_object_pos.broadcastAndWait();\n    wait(0.3, seconds);\n    Brain.Screen.clearScreen();\n  wait(5, msec);\n  }\n  return 0;\n}\n\n\nint main() {\n  // Initializing Robot Configuration. DO NOT REMOVE!\n  vexcodeInit();\n\n  // register event handlers\n  check_object_pos(onevent_check_object_pos_0);\n\n  wait(15, msec);\n  // post event registration\n\n  // set default print color to black\n  printf(\"\\033[30m\");\n\n  // Wait for ADI sensors to initialize\n  wait(100, msec);\n\n\n  whenStarted1();\n}","target":"Physical"}